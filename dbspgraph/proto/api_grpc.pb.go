// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: api.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	JobQueue_JobStream_FullMethodName = "/proto.JobQueue/JobStream"
)

// JobQueueClient is the client API for JobQueue service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type JobQueueClient interface {
	// JobStream establishes a bi-directional connection between a worker and a
	// master. The master eventually broadcasts a new job to the connected
	// workers and the job super-steps are executed in lock-step across all
	// workers.
	JobStream(ctx context.Context, opts ...grpc.CallOption) (JobQueue_JobStreamClient, error)
}

type jobQueueClient struct {
	cc grpc.ClientConnInterface
}

func NewJobQueueClient(cc grpc.ClientConnInterface) JobQueueClient {
	return &jobQueueClient{cc}
}

func (c *jobQueueClient) JobStream(ctx context.Context, opts ...grpc.CallOption) (JobQueue_JobStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &JobQueue_ServiceDesc.Streams[0], JobQueue_JobStream_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &jobQueueJobStreamClient{stream}
	return x, nil
}

type JobQueue_JobStreamClient interface {
	Send(*WorkerPayload) error
	Recv() (*MasterPayload, error)
	grpc.ClientStream
}

type jobQueueJobStreamClient struct {
	grpc.ClientStream
}

func (x *jobQueueJobStreamClient) Send(m *WorkerPayload) error {
	return x.ClientStream.SendMsg(m)
}

func (x *jobQueueJobStreamClient) Recv() (*MasterPayload, error) {
	m := new(MasterPayload)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// JobQueueServer is the server API for JobQueue service.
// All implementations must embed UnimplementedJobQueueServer
// for forward compatibility
type JobQueueServer interface {
	// JobStream establishes a bi-directional connection between a worker and a
	// master. The master eventually broadcasts a new job to the connected
	// workers and the job super-steps are executed in lock-step across all
	// workers.
	JobStream(JobQueue_JobStreamServer) error
	mustEmbedUnimplementedJobQueueServer()
}

// UnimplementedJobQueueServer must be embedded to have forward compatible implementations.
type UnimplementedJobQueueServer struct {
}

func (UnimplementedJobQueueServer) JobStream(JobQueue_JobStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method JobStream not implemented")
}
func (UnimplementedJobQueueServer) mustEmbedUnimplementedJobQueueServer() {}

// UnsafeJobQueueServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to JobQueueServer will
// result in compilation errors.
type UnsafeJobQueueServer interface {
	mustEmbedUnimplementedJobQueueServer()
}

func RegisterJobQueueServer(s grpc.ServiceRegistrar, srv JobQueueServer) {
	s.RegisterService(&JobQueue_ServiceDesc, srv)
}

func _JobQueue_JobStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(JobQueueServer).JobStream(&jobQueueJobStreamServer{stream})
}

type JobQueue_JobStreamServer interface {
	Send(*MasterPayload) error
	Recv() (*WorkerPayload, error)
	grpc.ServerStream
}

type jobQueueJobStreamServer struct {
	grpc.ServerStream
}

func (x *jobQueueJobStreamServer) Send(m *MasterPayload) error {
	return x.ServerStream.SendMsg(m)
}

func (x *jobQueueJobStreamServer) Recv() (*WorkerPayload, error) {
	m := new(WorkerPayload)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// JobQueue_ServiceDesc is the grpc.ServiceDesc for JobQueue service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var JobQueue_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.JobQueue",
	HandlerType: (*JobQueueServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "JobStream",
			Handler:       _JobQueue_JobStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "api.proto",
}
